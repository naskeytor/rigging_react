services:
  db:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 3664atanas
      MYSQL_DATABASE: rigging
      MYSQL_USER: nasko
      MYSQL_PASSWORD: 3664atanas
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
      - ./conf.d:/etc/mysql/conf.d
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      rigging_network:
        ipv4_address: 172.25.0.3
    healthcheck: # ðŸ”´ Espera a que MySQL estÃ© listo antes de que el backend intente conectarse
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      timeout: 5s

  admin:
    image: phpmyadmin:latest
    restart: always
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: 3664atanas
    ports:
      - "8080:80"
    networks:
      rigging_network:
        ipv4_address: 172.25.0.4

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    environment:
      FLASK_ENV: development
      FLASK_DEBUG: 1
      FLASK_APP: app.py
      PYTHONPATH: /app
    ports:
      - "5000:5000"
    networks:
      rigging_network:
        ipv4_address: 172.25.0.5
    depends_on:
      db:
        condition: service_healthy  # ðŸ”´ Espera hasta que MySQL estÃ© listo
    volumes:
      - ./backend:/app/backend
    command: flask run --host=0.0.0.0 --port=5000  # ðŸ”´ Asegura que Flask se ejecute en el puerto correcto

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "5173:5173"  # Mapea el puerto de Vite al sistema
    networks:
      rigging_network:
        ipv4_address: 172.25.0.6
    volumes:
      - ./frontend:/app/frontend
      - ./nginx/certs:/app/certs  # Montar certificados en frontend
    working_dir: /app/frontend
    command: [ "npm", "run", "dev", "--", "--host" ]

  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs  # Montar certificados en Nginx
    ports:
      - "80:80"
      - "443:443"  # Exponer HTTPS
    networks:
      rigging_network:
        ipv4_address: 172.25.0.7
    depends_on:
      - backend
      - frontend


networks:
  rigging_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  db-data: